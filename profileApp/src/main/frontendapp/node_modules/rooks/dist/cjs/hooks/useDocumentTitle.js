'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var noop = require('../utils/noop.js');
var react = require('react');

/**
 * useDocumentTitle
 * @description A hook to easily update document title with React
 */
/**
 * useDocumentTitle hook
 *
 * This hook allows you to set the document title.
 *
 * @param title - The new title for the document
 * @param options - An optional object with a `resetOnUnmount` property to control whether the document title should be reset to its previous value when the component is unmounted. Defaults to false.
 *
 * @example
 * function App() {
 *   useDocumentTitle("My App", { resetOnUnmount: true });
 *   return <div>Hello, world!</div>;
 * }
 * @see {@link https://rooks.vercel.app/docs/useDocumentTitle}
 */
function useDocumentTitle(title, options = {}) {
    const isBrowser = typeof window !== "undefined";
    const prevTitleRef = react.useRef(isBrowser ? document.title : "");
    const { resetOnUnmount = false } = options;
    react.useEffect(() => {
        if (isBrowser) {
            document.title = title;
            const lastTitle = prevTitleRef.current;
            if (resetOnUnmount) {
                return () => {
                    document.title = lastTitle;
                };
            }
        }
        return noop.noop;
    }, [title, isBrowser, resetOnUnmount]);
}

exports.useDocumentTitle = useDocumentTitle;
