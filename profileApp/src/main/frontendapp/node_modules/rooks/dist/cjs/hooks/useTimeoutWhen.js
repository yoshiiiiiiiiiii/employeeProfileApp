'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var react = require('react');
var noop = require('../utils/noop.js');
var useFreshCallback = require('./useFreshCallback.js');

/**
 * A setTimeout hook that calls a callback after a timeout duration
 * when a condition is true
 *
 * @param callback The callback to be invoked after timeout
 * @param timeoutDelayMs Amount of time in ms after which to invoke
 * @param when The condition which when true, sets the timeout
 * @see https://rooks.vercel.app/docs/useTimeoutWhen
 */
function useTimeoutWhen(callback, timeoutDelayMs = 0, when = true, key = 0) {
    const freshCallback = useFreshCallback.useFreshCallback(callback);
    react.useEffect(() => {
        if (when) {
            function internalCallback() {
                freshCallback();
            }
            // eslint-disable-next-line no-negated-condition
            if (typeof window !== "undefined") {
                const timeout = window.setTimeout(internalCallback, timeoutDelayMs);
                return () => {
                    window.clearTimeout(timeout);
                };
            }
            else {
                console.warn("useTimeoutWhen: window is undefined.");
            }
        }
        return noop.noop;
    }, [timeoutDelayMs, when, key, freshCallback]);
}

exports.useTimeoutWhen = useTimeoutWhen;
