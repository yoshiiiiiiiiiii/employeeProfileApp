'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var react = require('react');

/**
 * useUndoRedoState
 * @description Setstate but can also undo and redo
 * @see {@link https://rooks.vercel.app/docs/useUndoRedoState}
 */
function isFunctionInitializer(functionToCheck) {
    return typeof functionToCheck === "function";
}
/**
 * useUndoRedoState hook
 *
 * This hook manages the state with undo and redo capabilities.
 *
 * @param initialState - The initial state value
 * @param options - An optional object with a `maxDepth` property to limit the history and future arrays
 * @returns A tuple with the current state, a function to update the state, and an object with undo and redo controls
 *
 * @example
 * const [state, setState, controls] = useUndoRedoState(0, { maxDepth: 3 });
 * // state is 0
 * setState(1); // state is 1
 * controls.undo(); // state is 0
 * controls.redo(); // state is 1
 */
function useUndoRedoState(initialState, options) {
    var _a;
    const [state, _setState] = react.useState(initialState);
    const [past, setPast] = react.useState([]);
    const [future, setFuture] = react.useState([]);
    const maxDepth = (_a = options === null || options === void 0 ? void 0 : options.maxDepth) !== null && _a !== void 0 ? _a : 100;
    const undo = react.useCallback(() => {
        setPast((pastStates) => {
            const newPast = [...pastStates];
            const previousState = newPast.pop();
            if (typeof previousState !== "undefined") {
                setFuture((futureStates) => [state, ...futureStates]);
                _setState(previousState);
            }
            return newPast;
        });
    }, [state]);
    const redo = react.useCallback(() => {
        setFuture((futureStates) => {
            const newFuture = [...futureStates];
            const nextState = newFuture.shift();
            if (typeof nextState !== "undefined") {
                setPast((pastStates) => [...pastStates, state]);
                _setState(nextState);
            }
            return newFuture;
        });
    }, [state]);
    const canUndo = react.useCallback(() => past.length > 0, [past]);
    const canRedo = react.useCallback(() => future.length > 0, [future]);
    const isUndoPossible = react.useMemo(() => past.length > 0, [past]);
    const isRedoPossible = react.useMemo(() => future.length > 0, [future]);
    const setState = react.useCallback((value) => {
        _setState((prevState) => {
            const nextState = isFunctionInitializer(value)
                ? value(prevState)
                : value;
            setPast((pastStates) => {
                const newPast = [...pastStates, prevState];
                if (newPast.length > maxDepth) {
                    newPast.shift();
                }
                return newPast;
            });
            setFuture([]);
            return nextState;
        });
    }, [maxDepth]);
    const clearUndoStack = react.useCallback(() => {
        setPast([]);
    }, []);
    const clearRedoStack = react.useCallback(() => {
        setFuture([]);
    }, []);
    const clearAll = react.useCallback(() => {
        setPast([]);
        setFuture([]);
    }, []);
    const controls = react.useMemo(() => {
        return {
            undo,
            redo,
            canUndo,
            canRedo,
            clearUndoStack,
            clearRedoStack,
            clearAll,
            isUndoPossible,
            isRedoPossible,
        };
    }, [
        undo,
        redo,
        canUndo,
        canRedo,
        clearUndoStack,
        clearRedoStack,
        clearAll,
        isUndoPossible,
        isRedoPossible,
    ]);
    return [state, setState, controls];
}

exports.useUndoRedoState = useUndoRedoState;
