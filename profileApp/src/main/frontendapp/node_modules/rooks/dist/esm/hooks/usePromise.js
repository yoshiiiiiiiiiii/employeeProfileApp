import { useState, useEffect } from 'react';
import { useFreshCallback } from './useFreshCallback.js';

/**
 * usePromise
 * @description Promise management hook for react
 * @see {@link https://rooks.vercel.app/docs/usePromise}
 */
function usePromise(asyncFunction, deps = []) {
    const [state, setState] = useState({
        data: null,
        loading: true,
        error: null,
    });
    const freshAsyncCallback = useFreshCallback(asyncFunction);
    useEffect(() => {
        let isMounted = true;
        async function fetchData() {
            try {
                const data = await freshAsyncCallback();
                if (isMounted) {
                    setState({
                        data,
                        loading: false,
                        error: null,
                    });
                }
            }
            catch (error) {
                if (isMounted) {
                    setState({
                        data: null,
                        loading: false,
                        error: error instanceof Error ? error : new Error(String(error)),
                    });
                }
            }
        }
        fetchData();
        return () => {
            isMounted = false;
        };
        // eslint-disable-next-line react-hooks/exhaustive-deps
    }, [freshAsyncCallback, ...deps]);
    return state;
}

export { usePromise };
