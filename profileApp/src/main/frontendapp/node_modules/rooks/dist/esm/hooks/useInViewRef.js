import { useState, useEffect, useCallback } from 'react';
import { noop } from '../utils/noop.js';

const config = {
    root: null,
    rootMargin: "0px 0px 0px 0px",
    threshold: [0, 1],
};
function useInViewRef(callbackOrOptions, options) {
    const callback = typeof callbackOrOptions === "function" ? callbackOrOptions : noop;
    const opts = typeof callbackOrOptions === "object"
        ? callbackOrOptions
        : options || config;
    const { root = null, rootMargin, threshold } = opts;
    const [node, setNode] = useState(null);
    const [inView, setInView] = useState(false);
    useEffect(() => {
        if (node) {
            const observer = new IntersectionObserver((entries, observerRef) => {
                for (const { isIntersecting } of entries)
                    setInView(isIntersecting);
                callback(entries, observerRef);
            }, opts);
            observer.observe(node);
            return () => {
                observer.disconnect();
            };
        }
        return noop;
    }, [node, callback, root, rootMargin, threshold, opts]);
    const ref = useCallback((nodeElement) => {
        setNode(nodeElement);
    }, []);
    return [ref, inView];
}

export { useInViewRef };
