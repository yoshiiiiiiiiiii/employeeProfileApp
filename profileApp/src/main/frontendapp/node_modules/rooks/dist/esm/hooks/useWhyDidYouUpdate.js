import { useRef, useEffect } from 'react';
import { useDidUpdate } from './useDidUpdate.js';

/**
 * useWhyDidYouUpdate
 * @description A hook that can track which value change caused a rerender
 * @see {@link https://rooks.vercel.app/docs/useWhyDidYouUpdate}
 */
function useWhyDidYouUpdate(componentName, currentProps, enableLogging = true) {
    const previousProps = useRef({});
    useDidUpdate(() => {
        if (previousProps.current && enableLogging) {
            const combinedKeys = Object.keys(Object.assign(Object.assign({}, previousProps.current), currentProps));
            const changedProps = {};
            combinedKeys.forEach((key) => {
                if (!Object.is(previousProps.current[key], currentProps[key])) {
                    changedProps[key] = {
                        from: previousProps.current[key],
                        to: currentProps[key],
                    };
                }
            });
            if (Object.keys(changedProps).length) {
                console.log("[why-did-you-update]", componentName, changedProps);
            }
        }
    }, [currentProps, componentName, enableLogging]);
    useEffect(() => {
        previousProps.current = currentProps;
    });
}

export { useWhyDidYouUpdate };
