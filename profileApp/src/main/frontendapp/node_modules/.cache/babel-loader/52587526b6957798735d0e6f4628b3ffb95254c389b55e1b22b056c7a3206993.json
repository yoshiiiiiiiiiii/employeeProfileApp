{"ast":null,"code":"import{useCallback,useState}from\"react\";//選択した従業員情報を特定し、モーダルを表示するカスタムフック\nexport const useSelectEmployee=()=>{const[selectedEmployee,setSelectedEmployee]=useState(null);const onSelectEmployee=useCallback(props=>{const{id,employees,onOpen}=props;const targetEmployee=employees.find(employee=>employee.id===id);setSelectedEmployee(targetEmployee);onOpen();},[]);return{onSelectEmployee,selectedEmployee};};","map":{"version":3,"names":["useCallback","useState","useSelectEmployee","selectedEmployee","setSelectedEmployee","onSelectEmployee","props","id","employees","onOpen","targetEmployee","find","employee"],"sources":["/home/yoshintm/React/react-type-script-webapp/src/hooks/useSelectEmployee.ts"],"sourcesContent":["import { useCallback, useState } from \"react\";\r\n\r\nimport { Employee } from \"../types/api/Employee\";\r\n\r\ntype Props = {\r\n  id: number;\r\n  employees: Array<Employee>;\r\n  onOpen:() => void;\r\n};\r\n\r\n//選択した従業員情報を特定し、モーダルを表示するカスタムフック\r\nexport const useSelectEmployee = () => {\r\n  const [selectedEmployee, setSelectedEmployee] = useState<Employee | null>(null);\r\n  const onSelectEmployee = useCallback((props: Props) => {\r\n    const { id, employees, onOpen } = props;\r\n    const targetEmployee = employees.find((employee) => employee.id === id);\r\n    setSelectedEmployee(targetEmployee!);\r\n    onOpen();\r\n  }, []);\r\n\r\n  return { onSelectEmployee, selectedEmployee };\r\n};\r\n"],"mappings":"AAAA,OAASA,WAAW,CAAEC,QAAQ,KAAQ,OAAO,CAU7C;AACA,MAAO,MAAM,CAAAC,iBAAiB,CAAGA,CAAA,GAAM,CACrC,KAAM,CAACC,gBAAgB,CAAEC,mBAAmB,CAAC,CAAGH,QAAQ,CAAkB,IAAI,CAAC,CAC/E,KAAM,CAAAI,gBAAgB,CAAGL,WAAW,CAAEM,KAAY,EAAK,CACrD,KAAM,CAAEC,EAAE,CAAEC,SAAS,CAAEC,MAAO,CAAC,CAAGH,KAAK,CACvC,KAAM,CAAAI,cAAc,CAAGF,SAAS,CAACG,IAAI,CAAEC,QAAQ,EAAKA,QAAQ,CAACL,EAAE,GAAKA,EAAE,CAAC,CACvEH,mBAAmB,CAACM,cAAe,CAAC,CACpCD,MAAM,CAAC,CAAC,CACV,CAAC,CAAE,EAAE,CAAC,CAEN,MAAO,CAAEJ,gBAAgB,CAAEF,gBAAiB,CAAC,CAC/C,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}