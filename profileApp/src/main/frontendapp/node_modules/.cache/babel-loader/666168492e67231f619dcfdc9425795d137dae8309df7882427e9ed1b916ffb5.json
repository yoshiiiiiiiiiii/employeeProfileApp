{"ast":null,"code":"import{useRecoilState}from\"recoil\";import{useMessage}from\"./useMessage\";import{useCallback,useState}from\"react\";import{EmployeeState}from\"../contexts/EmployeeState\";import axios from\"axios\";/**\r\n * パスワード再設定処理関数\r\n * @returns editPassword:パスワード再設定処理 loading:処理中判定\r\n */export const useEditPassword=()=>{const{showMessage}=useMessage();const[loading,setLoading]=useState(false);const[employeeState,setEmployeeState]=useRecoilState(EmployeeState);const[oldPassword,setOldPassword]=useState(\"\");const[newPassword,setNewPassword]=useState(\"\");const editPassword=useCallback(async()=>{setLoading(true);await axios.post(\"/api/editPassword\",{employeeId:employeeState,oldPassword:oldPassword,newPassword:newPassword}).then(()=>{showMessage({title:\"パスワードの再設定が完了しました\",status:\"success\"});setLoading(false);setOldPassword(\"\");setNewPassword(\"\");}).catch(()=>{showMessage({title:\"パスワードの再設定が出来ませんでした。旧パスワードが間違っています\",status:\"error\"});setLoading(false);setOldPassword(\"\");setNewPassword(\"\");});},[]);return{editPassword,loading};};","map":{"version":3,"names":["useRecoilState","useMessage","useCallback","useState","EmployeeState","axios","useEditPassword","showMessage","loading","setLoading","employeeState","setEmployeeState","oldPassword","setOldPassword","newPassword","setNewPassword","editPassword","post","employeeId","then","title","status","catch"],"sources":["/home/yoshintm/React/react-type-script-webapp/src/hooks/useEditPassword.ts"],"sourcesContent":["import { useRecoilState } from \"recoil\";\r\nimport { useMessage } from \"./useMessage\";\r\nimport { useCallback, useState } from \"react\";\r\nimport { EmployeeState } from \"../contexts/EmployeeState\";\r\nimport axios from \"axios\";\r\n\r\n/**\r\n * パスワード再設定処理関数\r\n * @returns editPassword:パスワード再設定処理 loading:処理中判定\r\n */\r\nexport const useEditPassword = () => {\r\n  const { showMessage } = useMessage();\r\n  const [loading, setLoading] = useState(false);\r\n  const [employeeState, setEmployeeState] = useRecoilState(EmployeeState);\r\n  const [oldPassword, setOldPassword] = useState(\"\");\r\n  const [newPassword, setNewPassword] = useState(\"\");\r\n\r\n  const editPassword = useCallback(async () => {\r\n    setLoading(true);\r\n    await axios\r\n      .post(\"/api/editPassword\", {\r\n        employeeId: employeeState,\r\n        oldPassword: oldPassword,\r\n        newPassword: newPassword,\r\n      })\r\n      .then(() => {\r\n        showMessage({\r\n          title: \"パスワードの再設定が完了しました\",\r\n          status: \"success\",\r\n        });\r\n        setLoading(false);\r\n        setOldPassword(\"\");\r\n        setNewPassword(\"\");\r\n      })\r\n      .catch(() => {\r\n        showMessage({\r\n          title:\r\n            \"パスワードの再設定が出来ませんでした。旧パスワードが間違っています\",\r\n          status: \"error\",\r\n        });\r\n        setLoading(false);\r\n        setOldPassword(\"\");\r\n        setNewPassword(\"\");\r\n      });\r\n  }, []);\r\n\r\n  return { editPassword, loading };\r\n};\r\n"],"mappings":"AAAA,OAASA,cAAc,KAAQ,QAAQ,CACvC,OAASC,UAAU,KAAQ,cAAc,CACzC,OAASC,WAAW,CAAEC,QAAQ,KAAQ,OAAO,CAC7C,OAASC,aAAa,KAAQ,2BAA2B,CACzD,MAAO,CAAAC,KAAK,KAAM,OAAO,CAEzB;AACA;AACA;AACA,GACA,MAAO,MAAM,CAAAC,eAAe,CAAGA,CAAA,GAAM,CACnC,KAAM,CAAEC,WAAY,CAAC,CAAGN,UAAU,CAAC,CAAC,CACpC,KAAM,CAACO,OAAO,CAAEC,UAAU,CAAC,CAAGN,QAAQ,CAAC,KAAK,CAAC,CAC7C,KAAM,CAACO,aAAa,CAAEC,gBAAgB,CAAC,CAAGX,cAAc,CAACI,aAAa,CAAC,CACvE,KAAM,CAACQ,WAAW,CAAEC,cAAc,CAAC,CAAGV,QAAQ,CAAC,EAAE,CAAC,CAClD,KAAM,CAACW,WAAW,CAAEC,cAAc,CAAC,CAAGZ,QAAQ,CAAC,EAAE,CAAC,CAElD,KAAM,CAAAa,YAAY,CAAGd,WAAW,CAAC,SAAY,CAC3CO,UAAU,CAAC,IAAI,CAAC,CAChB,KAAM,CAAAJ,KAAK,CACRY,IAAI,CAAC,mBAAmB,CAAE,CACzBC,UAAU,CAAER,aAAa,CACzBE,WAAW,CAAEA,WAAW,CACxBE,WAAW,CAAEA,WACf,CAAC,CAAC,CACDK,IAAI,CAAC,IAAM,CACVZ,WAAW,CAAC,CACVa,KAAK,CAAE,kBAAkB,CACzBC,MAAM,CAAE,SACV,CAAC,CAAC,CACFZ,UAAU,CAAC,KAAK,CAAC,CACjBI,cAAc,CAAC,EAAE,CAAC,CAClBE,cAAc,CAAC,EAAE,CAAC,CACpB,CAAC,CAAC,CACDO,KAAK,CAAC,IAAM,CACXf,WAAW,CAAC,CACVa,KAAK,CACH,mCAAmC,CACrCC,MAAM,CAAE,OACV,CAAC,CAAC,CACFZ,UAAU,CAAC,KAAK,CAAC,CACjBI,cAAc,CAAC,EAAE,CAAC,CAClBE,cAAc,CAAC,EAAE,CAAC,CACpB,CAAC,CAAC,CACN,CAAC,CAAE,EAAE,CAAC,CAEN,MAAO,CAAEC,YAAY,CAAER,OAAQ,CAAC,CAClC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}